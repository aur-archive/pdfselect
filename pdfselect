#! /bin/sh
##
##  pdfselect: A shell program to pages subset of a PDF file
##
##  Author ezzetabi, based on the work of
##  Author David Firth (http://www.warwick.ac.uk/go/dfirth)
##
version=1.1
echo "This is pdfselect version ""$version"
##
##  Relies on pdflatex and the 'pdfpages' package (version 0.2e
##  or later).
##
#######################################################################
##  CONFIGURATION: change this block as necessary
##
##  THESE SETTINGS WILL BE OVER-RIDDEN by any found at
##     /etc/pdfselect.conf
##     /usr/share/etc/pdfselect.conf
##     /usr/local/share/pdfselect.conf
##     /usr/local/etc/pdfselect.conf
##     ~/.pdfselect.conf
##  (which are read in that order)
##
##  First say where your "pdflatex" program lives:
##
pdflatex=pdflatex
#pdflatex="pdflatex.exe"    ## this for Windows computers
##
##  Next pdfinfo name:
##
pdfinfo=pdfinfo
##
##  Next a permitted location for temporary files on your system:
##
tempfileDir="/var/tmp" ## /var/tmp is standard on many unix systems
#tempfileDir="C:/tmp"  ## use something like this under Windows
##
##  Now specify the default settings for pdfselect:
##
paper=a4paper          ## alternatives are other LaTeX paper sizes
pages=all
evenonly=false
oddonly=false
reversed=false
orient=portrait        ## alternatives are landscape and portrait
tidy=true              ## delete all temporary files immediately
subset=false           ## internal, true if evenonly or oddonly is true
pagesknown=false       ## internal, if true the page range is the same for
                       ## every file. (e.i. pages=- or pages=last,1)
##
##  END OF CONFIGURATION
#######################################################################
##
##  Read the configuration file(s) if such exist:
##
for d in /etc /usr/share/etc /usr/local/share /usr/local/etc
do if test -f $d/pdfselect.conf; then
     echo "Reading site configuration from $d/pdfselect.conf"
     source $d/pdfselect.conf
   fi
done
if test -f ~/.pdfselect.conf; then
   echo "Reading user defaults from ~/.pdfselect.conf";
   source ~/.pdfselect.conf;
fi
#######################################################################
##
##  Define the output of "pdfselect --help"
##
helptext="
Usage: pdfselect args
where args must include source pdf filename(s) and optionally also
* a list or range of pages to be included, for example
                           --pages 3-6
                           --pages 2,8,4,5
                           --pages all
* a LaTeX papersize, for example --paper a4paper
                                 --paper letterpaper
* one of --evenonly true
         --evenonly false
  if true the outfile will contains only even pages.
* one of --oddonly true
         --oddnonly false
  if true the outfile will contains only odd pages.
* one of --reversed true
         --reversed false
  if true the outfile will contains only odd pages.
* the output page orientation, one of --orient landscape
                                      --orient portrait
* a specific name for the output file, e.g. --outfile printme.pdf
* one of --tidy true
         --tidy false
  according to whether or not temporary files should be deleted immediately.
  If --tidy false is used, such files are left in $tempfileDir.

Default arguments for you at this site are
  --paper $paper --pages $pages --tidy $tidy --evenonly $evenonly --oddonly
  $oddonly --reversed $reversed --orient $orient
"
##
##  Check that necessary LaTeX packages are installed
##
PATH=`dirname "$pdflatex"`:$PATH
export PATH
case `kpsewhich pdfpages.sty` in
  "") echo "pdfselect: pdfpages.sty not installed"; exit 1;;
esac
case `kpsewhich eso-pic.sty` in
  "") echo \
      "pdfselect: eso-pic.sty not installed (see the pdfpages manual)"
      exit 1;;
esac
case `kpsewhich everyshi.sty` in
  "") echo \
      "pdfselect: everyshi.sty not installed (see the pdfpages manual)"
      exit 1;;
esac
##
##  Now do the argument loop...
##
sourcePath=
outFile=
inFiles=0
newline='
'
while test -n "${1}"; do
  case "${1}" in
    *.pdf) inFiles=`expr $inFiles + 1`;
           sourcePath="$sourcePath$newline${1}";;
    --help) echo "$helptext";
            exit 0;;
    --pages) pages="${2}"
             shift;;
    --paper) paper="${2}"
             shift;;
    --outfile) outFile="${2}"
               case "$outFile" in
                *".pdf");;
                *) echo "pdfselect: outfile name must end in .pdf";
                   exit 1;;
               esac
               shift;;
    --tidy) tidy="${2}"
            shift;;
    --evenonly) evenonly="${2}"
            if [ $oddonly == true ] ; then
              echo "pdfselect: oddonly and evenonly must not appear together."
              exit 1
            fi
            subset=true;
            shift;;
    --oddonly) oddonly="${2}"
            if [ $evenonly == true ] ; then
              echo "pdfselect: oddonly and evenonly must not appear together."
              exit 1
            fi
            subset=true;
            shift;;
    --reversed) reversed="${2}"
            shift;;
    --orient) orient="${2}"
            shift;;
    *) echo "pdfselect: unrecognised argument ${1}"; exit 1;;
  esac
  shift
done
if test $inFiles -gt 1 ; then
  if test "$outFile" != "" ; then
    echo "pdfselect: --outfile cannot be used with multiple input files";
    echo "pdfselect: no files processed"
    exit 1;
  fi
fi
case "$sourcePath" in
  "") echo "pdfselect: no pdf source file specified
For information on usage try \"pdfselect --help\""; exit 1;;
esac
OIFS=IFS
IFS="$newline"
for k in $sourcePath
do
  if test -f "$k"; then :;
    else echo "pdfselect: ""$k"" does not exist, no files were processed";
    exit 1;
  fi
done
IFS=OIFS
if [ $subset == false ] ; then
  if [ $pages == all ] ; then
    pagesknown=true
    if [ $reversed == true ] ; then
      pages='last-1'
    else
      pages=-
    fi
  fi
fi
if [ $oddonly == true ] ; then
  oddonly=o
else
  oddonly=''
fi
if [ $evenonly == true ] ; then
  evenonly=e
else
  evenonly=''
fi
if [ $reversed == true ] ; then
  reversed=r
else
  reversed=''
fi
##
##  That's the arguments done.
##
pwd=`pwd | sed 's/ /\\ /'`
IFS="$newline"
##
##  Now work on the input file (or files in turn)
##
counter=0
opages=$pages
for inFile in $sourcePath
do
  echo "Processing $inFile..."
  counter=`expr $counter + 1`
  cd "$pwd"
  pdfName=`basename "$inFile"`
  sourceDir=`dirname "$inFile"` ; cd "$sourceDir" ; sourceDir=`pwd`
  sourceFullPath="$sourceDir"/"$pdfName"
  #if needed generate the pages range
  if [ $pagesknown == false ] ; then
      pages=$opages
      # detect the number of pages
      lastpage=`$pdfinfo "$sourceFullPath" | sed -n -e '/^Pages: / s_^Pages: *__ p'`
      # replaces 'all' and 'last' with explicit ranges.
      pages=`echo -n $pages | \
        sed -e 's_^  *\|  *$__' -e 's_last_'$lastpage'_g' -e 's_all_1-'$lastpage'_g'`
      # enumerate the page list explicitly
      pages=`pdfselect_i $lastpage $pages $reversed $oddonly $evenonly`
      # split the page numbers with commas
      pages=`echo -n $pages | sed -e 's_^  *\|  *$__' -e 's_ _,_g'`
      # add surrounding brackets
      pages={$pages}
      if [ $pages == '{}' ] ; then
        echo Selected an empty/invalid range for $pdfName. Skipping...
        pages=''
      fi
  fi
  if [ x$pages != x ] ; then
    cd "$pwd"
    case "$outFile" in
      "") ## no --outfile argument supplied
          outfileNameRoot=`echo "$pdfName" | \
            sed 's/\.pdf$//'`-$evenonly$oddonly$reversed;
          outfileDir="$sourceDir";
          outFile="$outfileNameRoot"".pdf";;
       *) ## --outfile argument was supplied
          outfileNameRoot=`basename "$outFile" | sed 's/\.pdf$//';`
          outfileDir=`dirname "$outFile"` ;
          cd "$outfileDir" ;
          outfileDir=`pwd` ;;
    esac
    case "$outfileDir"/"$outfileNameRoot"".pdf" in
      $sourceFullPath) echo "pdfselect: outfile and source cannot be the same";
                  exit 1;;
      //"$outfileNameRoot"".pdf") outfileDir="";;  ## in case of output
    esac                                           ## to the root directory!
    ##
    ##  Now edit the temporary LaTeX input file
    ##
    uniqueName="$$"-"$counter"
    ln -s "$sourceFullPath" "$tempfileDir"/"$uniqueName"source.pdf
    texFile="$tempfileDir"/"$uniqueName".tex
    msgFile="$tempfileDir"/"$uniqueName".msgs
    (sed s*pdfname*"$tempfileDir"/"$uniqueName"source.pdf* <<EndTemplate
\\documentclass[papersize,orientation]{article}
\\usepackage{pdfpages}
\\begin{document}
\\includepdf[fitpaper=true,pages=]{pdfname}
\\end{document}
EndTemplate
) \
      | sed s/pages=/pages="$pages"/ \
      | sed s/papersize/"$paper"/ \
      | sed s/orientation/"$orient"/ \
      > "$texFile"
    echo "  Temporary LaTeX file for this job is ""$texFile"
    ##
    ##  Now run pdflatex and tidy up
    ##
    echo "  Calling pdflatex..."
    cd "$tempfileDir"
    "$pdflatex" --interaction batchmode "$texFile" > "$msgFile"
    if test -f "$tempfileDir"/"$uniqueName"".aux";
          ## ie if LaTeX didn't choke
      then if cp "$tempfileDir"/"$uniqueName".pdf \
                 "$outfileDir"/"$outfileNameRoot"".pdf"
           then echo "  Finished: output is"\
                     "$outfileDir"/"$outfileNameRoot"".pdf"
           fi
           case "$tidy" in
             true) rm "$tempfileDir"/"$uniqueName"* ;;
           esac
           outFile=""
      else echo "  Failed: output file not written"
    fi
  fi
done
IFS=OIFS

